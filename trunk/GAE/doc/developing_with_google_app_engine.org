* App Engine works with any WSGI-compatible framework. 
For convenience, the App Engine SDK includes webapp in its standard distribution and may be used for handling web requests for an application.
webapp doesn't provoide a feature set like Django or other Python frameworks. It's adequate for writing nontrival web applications, though, and is capable of
handling all HTTP 1.1 requests, setting headers, managing cookies, and so on.webapp includes these objects:
** Request: A subclass of the WebOb Request class that ocntains information about an incoming request
** Response: Used for sending data, status, and header informaiton back to the caller
** RequestHandler: A base class that the application developer extends for processing application requests based on Request objects passed from a regular HTTP request
** WSGIApplication: The main entry point info an App Engine application that sets the request handlers and overall environment

webapp also includes a couple of useful funcitons in google.appengine.webapp.util package:
** run_wsgi_app(anApplication) is similar to the wsgiref WSGI-to-CGI adapter from teh standard Python library. This function is aware of the App Engine environment and provides debugging messages to the console for message handling and appliaction errors in ways that the standard Python CGI handler doesn't
** @login_required is an anotation for verifying if the end user is logged on with a Google account. If not, it optionally redirects the user to the sign-in page.
Review the App Engine documentation often.

* Using the Sandboxed Python Runtime
can do :
  ** Use any pure Python third-party libraries and packages
  ** Define Python packages in the application subdirectories
  ** Read the filesystem, including any of the files uploaded with teh applicaiton except for static files, which aren't kept on the file system
  ** Use the App Engine datastore for persisting data
  ** Make any calls to the Python standard library except for those that attemp unsafe system-level operations

* Debugging the Application
   The App Engine troubleshooting tools are limited to using the debugging features in the development web server, the WSGIApplication objects' configuration, and displaying inline data in the application's output.
   ** Debugging Options for the Development Web Server
   with --debug --debug_imports --history_path
   ** Debugging a WSGIApplicaiton
   class WSGIApplication(locatorMapping, debug=False)
   ** Implementing a Debugging Aid


* Important: page 37: Running an application from a Custom Domain


* Chapter 3: The Design of a Google App Engine Application
  The rest of this book will focus on how to develop complete applications using
  the API features and how to manage the application once it's been published.
  ** BookmarksBin

* Building an Application
** Working with other frameworks
   the webapp framework is the default tool set for building web applications
   but not the only one. App Engine supports any WSGI-compatible framework as
   long as it's written entirely in Python.
   webapp's templating engine is really a version of Django's;App Engine provides
   only minimal documentation for it so it's helpful to open a copy of the DJango
   reference guide in a web browser during development.(note. django0.96)
   
   

   


  






